@{
    ViewBag.Title = "Horas Extra";
}
@section Styles {
    <link href="~/css/Jornada.css" rel="stylesheet" />
}
<div class="container-xxl py-5">
    <div class="row justify-content-center mb-4">
        <div class="col-lg-8 text-center">
            <h2 class="fw-semibold mb-1">
                <i class="mdi mdi-timer-plus text-warning me-2"></i>
                Horas Extra
            </h2>
            <p class="lead text-muted">Registra tus eventos de la jornada extra.</p>
        </div>
    </div>
    <div class="row justify-content-center g-4">
        <div class="col-xl-5 col-lg-6">
            <div class="card card-animate shadow rounded-4">
                <div class="card-body py-4 text-center">
                    <div id="alertEstadoHorasExtra" class="mb-3"></div>
                    <div class="d-flex flex-wrap gap-3 justify-content-center mt-3" id="accionesHorasExtra">
                        <!-- Botones generados por JS -->
                    </div>
                    <a href="@Url.Action("Index", "Home")" class="btn btn-link mt-3">Volver al inicio</a>
                </div>
            </div>
        </div>
        <div class="col-xl-5 col-lg-6">
            <div class="card shadow rounded-4 h-100">
                <div class="card-body py-4">
                    <h5 class="fw-semibold mb-3">
                        <i class="mdi mdi-timeline-clock-outline text-warning me-2"></i>
                        Timeline Horas Extra
                    </h5>
                    <div id="timelineHorasExtra">
                        <div class="text-center py-4 text-muted">
                            <i class="mdi mdi-progress-clock mdi-36px mb-2"></i>
                            <br />
                            Cargando eventos de horas extra...
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Offcanvas para acciones extra -->
<div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvasExtras" aria-labelledby="offcanvasExtrasLabel">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="offcanvasExtrasLabel">Registrar acción extra</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Cerrar"></button>
    </div>
    <div class="offcanvas-body">
        <div id="accionesExtraBtns" class="d-flex flex-wrap gap-2 mb-3"></div>
        <div id="extraObsGroup" class="mb-3" style="display:none;">
            <label class="form-label">Observaciones</label>
            <input type="text" class="form-control" id="extraObservaciones" placeholder="Detalle de la acción">
        </div>
        <div class="d-flex justify-content-end gap-2">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="offcanvas">Cancelar</button>
            <button type="button" class="btn btn-primary" id="btnRegistrarExtra" disabled>Registrar</button>
        </div>
    </div>
</div>
<div id="toastContainer"></div>

@section Scripts {
    <script>
           // ==================== CONFIGURACIÓN ====================

        // Opciones de acciones extra (puedes agregar más si tu backend lo soporta)
        const opcionesExtra = [
            { key: "permiso", label: "Permiso especial", icon: "mdi mdi-account-cancel text-warning", requiereObs: true, inicio: "permiso", fin: "permiso_fin" },
            { key: "break", label: "Break Horas Extra", icon: "mdi mdi-coffee-outline text-info", requiereObs: false, inicio: "break_inicio", fin: "break_fin" },
            { key: "traslado", label: "Traslado Horas Extra", icon: "mdi mdi-car-arrow-right text-secondary", requiereObs: false, inicio: "traslado_inicio", fin: "traslado_fin" },
            // Puedes agregar más tipos aquí...
        ];

        let estadoHorasExtra = "noIniciado";
        let almuerzoExtra = "noIniciado";
        let enPermisoExtra = false;
        let enBreakExtra = false;
        let enTrasladoExtra = false;
        let tipoExtraActivo = null; // "permiso", "break", "traslado" o null
        let jornadaHorasExtraId = null;
        let extraTipoEventoSeleccionado = null;

        // ==================== EVENTOS DE ARRANQUE ====================

        document.addEventListener("DOMContentLoaded", function () {
            consultarEstadoHorasExtra();
            cargarTimelineHorasExtra();

            // Prepara offcanvas de acciones extra
            document.getElementById('offcanvasExtras').addEventListener('show.bs.offcanvas', () => {
                window._registrandoExtra = false;
                extraTipoEventoSeleccionado = null;
                document.getElementById('extraObservaciones').value = "";
                document.getElementById('extraObsGroup').style.display = "none";
                document.getElementById('btnRegistrarExtra').disabled = true;
                setBtnLoading('btnRegistrarExtra', false);
                renderizarAccionesExtraBtns();
            });

            document.getElementById('btnRegistrarExtra').addEventListener('click', handleRegistrarExtra);
        });

        // ==================== BOTONES PRINCIPALES ====================

        function actualizarBotonesHorasExtra() {
            const cont = document.getElementById("accionesHorasExtra");
            cont.innerHTML = "";

            // Si hay acción extra activa: muestra solo botón de finalizar esa acción
            if (tipoExtraActivo) {
                const opc = opcionesExtra.find(x => x.key === tipoExtraActivo);
                let icon = (opc && opc.icon) || "mdi mdi-alert";
                let label = "Finalizar " + (opc ? opc.label : tipoExtraActivo.charAt(0).toUpperCase() + tipoExtraActivo.slice(1));
                let finEvento = (opc && opc.fin) || (tipoExtraActivo + "_fin");

                cont.innerHTML = `
                    <button class="btn btn-warning btn-lg" id="btnFinExtra">
                        <i class="${icon} me-1"></i> ${label}
                        <span class="spinner-border spinner-border-sm ms-2" id="spinnerFinExtra" style="display:none"></span>
                    </button>
                `;
                document.getElementById("btnFinExtra").onclick = async function () {
                    setBtnLoading('btnFinExtra', true);
                    await registrarEventoHorasExtra(finEvento, "", null, (ok) => {
                        setBtnLoading('btnFinExtra', false);
                        if (ok) {
                            consultarEstadoHorasExtra();
                            cargarTimelineHorasExtra();
                        }
                    });
                };
                return; // solo muestra este botón mientras está activo el extra
            }

            // Si no hay acción extra activa: botones normales
            let estadoMsg = "";
            document.getElementById("alertEstadoHorasExtra").innerHTML = estadoMsg;

            if (estadoHorasExtra === "noIniciado") {
                cont.innerHTML = `
                    <button class="btn btn-success btn-lg" id="btnInicioHorasExtra">
                        <i class="mdi mdi-play me-1"></i> Iniciar Horas Extra
                        <span class="spinner-border spinner-border-sm ms-2" id="spinnerInicioHE" style="display:none"></span>
                    </button>
                `;
                document.getElementById("btnInicioHorasExtra").onclick = async function () {
                    setBtnLoading('btnInicioHorasExtra', true);
                    await registrarEventoHorasExtra("horas_extra_inicio", "", null, (ok) => {
                        setBtnLoading('btnInicioHorasExtra', false);
                        if (ok) consultarEstadoHorasExtra();
                        cargarTimelineHorasExtra();
                    });
                };
            } else if (estadoHorasExtra === "enCurso") {
                const almuerzoFinalizado = almuerzoExtra === "finalizado";
                const almuerzoBtnClass = almuerzoFinalizado ? "btn-secondary" : "btn-warning";
                const almuerzoBtnText = almuerzoFinalizado
                    ? "Almuerzo Finalizado"
                    : (almuerzoExtra === "enCurso" ? "Fin de Almuerzo" : "Almuerzo Horas Extra");

                cont.innerHTML = `
                    <button class="btn ${almuerzoBtnClass} btn-lg" id="btnAlmuerzoHorasExtra"
                        ${almuerzoFinalizado ? 'disabled title="Almuerzo ya finalizado"' : ''}>
                        <i class="mdi mdi-silverware-fork-knife me-1"></i>
                        ${almuerzoBtnText}
                        <span class="spinner-border spinner-border-sm ms-2" id="spinnerAlmuerzoHE" style="display:none"></span>
                    </button>
                    <button class="btn btn-danger btn-lg" id="btnFinHorasExtra">
                        <i class="mdi mdi-stop me-1"></i> Finalizar Horas Extra
                        <span class="spinner-border spinner-border-sm ms-2" id="spinnerFinHE" style="display:none"></span>
                    </button>
                    <button class="btn btn-secondary btn-lg" id="btnExtras" data-bs-toggle="offcanvas" data-bs-target="#offcanvasExtras">
                        <i class="mdi mdi-dots-horizontal me-1"></i> Acciones Extra
                    </button>
                `;
                // Almuerzo
                if (!almuerzoFinalizado) {
                    document.getElementById("btnAlmuerzoHorasExtra").onclick = async function () {
                        setBtnLoading('btnAlmuerzoHorasExtra', true);
                        let tipo = almuerzoExtra === "noIniciado" ? "almuerzo_inicio_horas_extra" : "almuerzo_fin_horas_extra";
                        await registrarEventoHorasExtra(tipo, "", null, (ok) => {
                            setBtnLoading('btnAlmuerzoHorasExtra', false);
                            if (ok) consultarEstadoHorasExtra();
                            cargarTimelineHorasExtra();
                        });
                    };
                }
                // Finalizar horas extra
                document.getElementById("btnFinHorasExtra").onclick = async function () {
                    setBtnLoading('btnFinHorasExtra', true);
                    await registrarEventoHorasExtra("horas_extra_fin", "", null, async function (ok) {
                        if (ok && jornadaHorasExtraId) {
                            try {
                                const res = await fetch('@Url.Action("CerrarJornada", "Jornada")', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify(jornadaHorasExtraId)
                                });
                                const result = await res.json();
                                if (res.ok && result.success) {
                                    showToast("¡Horas extra finalizadas y cerradas! 🏁", "primary");
                                    consultarEstadoHorasExtra();
                                    cargarTimelineHorasExtra();
                                } else {
                                    showToast(result.mensaje || "Error al cerrar las horas extra.", "danger");
                                }
                            } catch (e) {
                                showToast("No se pudo cerrar las horas extra.", "danger");
                            }
                        } else {
                            showToast("No hay jornada extra activa o ID no encontrado.", "danger");
                        }
                        setBtnLoading('btnFinHorasExtra', false);
                    });
                };
            }
        }

        // ==================== TIMELINE Y ESTADOS ====================

        function cargarTimelineHorasExtra() {
            const cont = document.getElementById("timelineHorasExtra");
            if (!cont) return;
            cont.innerHTML = `<div class="text-center py-4 text-muted">
                <i class="mdi mdi-progress-clock mdi-36px mb-2"></i>
                <br />Cargando eventos de horas extra...
            </div>`;

            fetch('@Url.Action("TimelineHoy", "Jornada")')
                .then(res => res.json())
                .then(eventos => {
                    cont.innerHTML = "";
                    enPermisoExtra = false; enBreakExtra = false; enTrasladoExtra = false;
                    tipoExtraActivo = null;

                    if (!eventos || !eventos.length) {
                        cont.innerHTML = `<div class="text-center text-muted">Sin eventos registrados aún.</div>`;
                        actualizarBotonesHorasExtra();
                        return;
                    }

                    eventos.forEach(ev => {
                        if (ev.codigo === "permiso") enPermisoExtra = true;
                        if (ev.codigo === "permiso_fin") enPermisoExtra = false;
                        if (ev.codigo === "break_inicio") enBreakExtra = true;
                        if (ev.codigo === "break_fin") enBreakExtra = false;
                        if (ev.codigo === "traslado_inicio") enTrasladoExtra = true;
                        if (ev.codigo === "traslado_fin") enTrasladoExtra = false;
                    });
                    if (enPermisoExtra) tipoExtraActivo = "permiso";
                    else if (enBreakExtra) tipoExtraActivo = "break";
                    else if (enTrasladoExtra) tipoExtraActivo = "traslado";
                    else tipoExtraActivo = null;

                    // Renderiza timeline (se puede agregar el mapa, IP, etc. aquí)
                    eventos.forEach(ev => {
                        let mapHtml = '';
                        if (ev.latitud && ev.longitud) {
                            const mapId = 'map-' + Math.random().toString(36).substr(2, 9);
                            mapHtml = `
                                <button class="btn btn-sm btn-outline-primary py-0 px-2 mb-1" onclick="document.getElementById('${mapId}').style.display='block'; this.style.display='none';">
                                    <i class="mdi mdi-map-marker-outline"></i> Ver mapa
                                </button>
                                <div id="${mapId}" style="display:none;">
                                    <iframe
                                        width="180"
                                        height="120"
                                        class="rounded-3 shadow-sm"
                                        style="border:0; margin-top:2px;"
                                        loading="lazy"
                                        allowfullscreen
                                        src="https://maps.google.com/maps?q=${ev.latitud},${ev.longitud}&z=16&output=embed">
                                    </iframe>
                                    <br>
                                    <button class="btn btn-sm btn-outline-secondary py-0 px-2 mt-1" onclick="this.parentElement.style.display='none'; this.parentElement.previousElementSibling.style.display='inline-block';">
                                        <i class="mdi mdi-close"></i> Cerrar mapa
                                    </button>
                                </div>
                            `;
                        }

                        cont.innerHTML += `
                            <div class="mb-3">
                                <div class="d-flex align-items-center">
                                    <span class="me-2">
                                        <i class="mdi ${ev.icono} fs-4"></i>
                                    </span>
                                    <span class="fw-medium">${ev.descripcion}</span>
                                    <span class="ms-auto text-muted small">${ev.hora}</span>
                                    ${ev.obs ? `<span class="ms-2 small text-muted">(${ev.obs})</span>` : ""}
                                </div>
                                <div class="ms-5 small text-muted">
                                    IP: ${ev.ip || 'N/D'}
                                    ${ev.latitud && ev.longitud ? `<span class="mx-2">| Coordenadas: ${Number(ev.latitud).toFixed(5)}, ${Number(ev.longitud).toFixed(5)}</span>` : ""}
                                    <br>
                                    ${mapHtml}
                                </div>
                            </div>
                        `;
                    });

                    actualizarBotonesHorasExtra();
                });
        }

        // ==================== OFFCANVAS ACCIONES EXTRA ====================

        function renderizarAccionesExtraBtns() {
            const cont = document.getElementById("accionesExtraBtns");
            cont.innerHTML = "";
            // Solo acciones que tengan evento inicio (ignora las solo informativas)
            opcionesExtra.forEach(opc => {
                if (!opc.inicio) return;
                cont.innerHTML += `
                    <button type="button" class="btn btn-outline-primary d-flex align-items-center gap-2 px-3 py-2${extraTipoEventoSeleccionado === opc.key ? ' active' : ''}"
                        data-key="${opc.key}" ${window._registrandoExtra ? 'disabled' : ''}>
                        <i class="${opc.icon} fs-5"></i> <span>${opc.label}</span>
                    </button>
                `;
            });
            cont.querySelectorAll('button').forEach(btn => {
                btn.onclick = function () {
                    if (window._registrandoExtra) return;
                    extraTipoEventoSeleccionado = this.getAttribute('data-key');
                    cont.querySelectorAll('button').forEach(b => b.classList.remove('active'));
                    this.classList.add('active');
                    const opc = opcionesExtra.find(x => x.key === extraTipoEventoSeleccionado);
                    document.getElementById("extraObsGroup").style.display = (opc && opc.requiereObs) ? "block" : "none";
                    document.getElementById('btnRegistrarExtra').disabled = false;
                };
            });
        }

        async function handleRegistrarExtra() {
            const btn = document.getElementById('btnRegistrarExtra');
            btn.disabled = true;
            setBtnLoading('btnRegistrarExtra', true);
            window._registrandoExtra = true;
            renderizarAccionesExtraBtns();

            const tipo = extraTipoEventoSeleccionado;
            const opc = opcionesExtra.find(x => x.key === tipo);
            const obs = document.getElementById('extraObservaciones').value.trim();

            if (!tipo) {
                showToast("Selecciona una acción.", "warning");
                window._registrandoExtra = false;
                setBtnLoading('btnRegistrarExtra', false);
                renderizarAccionesExtraBtns();
                btn.disabled = true;
                return;
            }
            if (opc && opc.requiereObs && !obs) {
                showToast("Por favor, agrega una observación para la acción seleccionada.", "warning");
                window._registrandoExtra = false;
                setBtnLoading('btnRegistrarExtra', false);
                renderizarAccionesExtraBtns();
                btn.disabled = false;
                return;
            }
            const datos = await obtenerDatosUbicacion();
            await registrarEventoHorasExtra(opc.inicio, obs, datos, function (ok) {
                window._registrandoExtra = false;
                setBtnLoading('btnRegistrarExtra', false);
                if (ok) {
                    showToast("¡Acción extra registrada!", "info");
                    extraTipoEventoSeleccionado = null;
                    consultarEstadoHorasExtra();
                    cargarTimelineHorasExtra();
                    var offcanvas = bootstrap.Offcanvas.getInstance(document.getElementById('offcanvasExtras'));
                    if (offcanvas) offcanvas.hide();
                }
                renderizarAccionesExtraBtns();
                btn.disabled = true;
                document.getElementById('extraObservaciones').value = "";
                document.getElementById('extraObsGroup').style.display = "none";
            });
        }


                function consultarEstadoHorasExtra() {
            fetch('@Url.Action("EstadoHorasExtraHoy", "HorasExtra")')
                .then(res => res.json())
                .then(data => {
                    estadoHorasExtra = data.estado ?? "noIniciado";
                    almuerzoExtra = data.almuerzo ?? "noIniciado";
                    jornadaHorasExtraId = data.jornadaId ?? null;
                    actualizarBotonesHorasExtra();
                    
                });
        }
        // ==================== HELPERS ====================

        async function registrarEventoHorasExtra(tipoEvento, obs = "", datosManual = null, callback) {
            const datos = datosManual || await obtenerDatosUbicacion();
            const response = await fetch('@Url.Action("RegistrarEventoHorasExtra", "HorasExtra")', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    tipoEvento: tipoEvento,
                    observaciones: obs,
                    ip: datos.ip,
                    latitud: datos.lat,
                    longitud: datos.lng
                })
            });
            const result = await response.json();
            if (response.ok && result.success) {
                if (typeof callback === "function") callback(true);
            } else {
                showToast(result.mensaje || 'No se pudo registrar el evento.');
                if (typeof callback === "function") callback(false);
            }
        }

        async function obtenerDatosUbicacion() {
            let ip = "";
            try {
                const res = await fetch("https://api.ipify.org?format=json");
                ip = (await res.json()).ip;
            } catch { ip = ""; }
            function obtenerUbicacion() {
                return new Promise(resolve => {
                    if (!navigator.geolocation) return resolve({ lat: null, lng: null });
                    navigator.geolocation.getCurrentPosition(
                        pos => resolve({ lat: pos.coords.latitude, lng: pos.coords.longitude }),
                        () => resolve({ lat: null, lng: null }),
                        { enableHighAccuracy: true, timeout: 5000 }
                    );
                });
            }
            const ubic = await obtenerUbicacion();
            return { ip, lat: ubic.lat, lng: ubic.lng };
        }

        function setBtnLoading(btnId, isLoading) {
            const btn = document.getElementById(btnId);
            if (!btn) return;
            let spinner = btn.querySelector('.spinner-border');
            if (!spinner) return;
            if (isLoading) {
                btn.disabled = true;
                spinner.style.display = "inline-block";
            } else {
                btn.disabled = false;
                spinner.style.display = "none";
            }
        }

        function showToast(message, type = 'danger') {
            const colorClass = {
                success: 'text-bg-success',
                info: 'text-bg-info',
                warning: 'text-bg-warning',
                primary: 'text-bg-primary',
                danger: 'text-bg-danger'
            }[type] || 'text-bg-danger';
            const toastId = 'toast-' + Date.now();
            const toastHtml = `
                <div id="${toastId}" class="toast align-items-center ${colorClass} border-0 show" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">${message}</div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            `;
            const container = document.getElementById('toastContainer');
            container.insertAdjacentHTML('beforeend', toastHtml);
            const toastEl = document.getElementById(toastId);
            new bootstrap.Toast(toastEl, { delay: 4000 }).show();
        }

        // ==================== FIN ====================

    </script>
}



